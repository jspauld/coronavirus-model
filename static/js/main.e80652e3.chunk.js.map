{"version":3,"sources":["simulation/Bucket.js","simulation/Sim.js","simulation/utils.js","App.js","index.js"],"names":["Bucket","sim","data","getUninfected","population","totalInfected","getPeopleIncubating","to","state","incubationDays","infectedByDay","slice","reduce","a","b","getPeopleInfectious","from","infectiveDays","startDay","day","unshift","newInfections","processInteractions","fromBucket","totalInteractionRate","interactionRate","getMitigationMult","uninfectedRatio","spreadMult","endDay","totalSize","bucketsData","relativeSize","percentOfTotalPopulation","initialInfected","this","spreadMultiple","totalDeaths","newDeaths","R0Adj","Sim","calculateR0Adj","buckets","values","weights","forEach","b1","b2","push","mean","arrValues","arrWeights","result","map","value","i","weight","p","c","utils","initialR0","getResults","done","useAnimate","startIndex","dailyData","effectiveR0","findIndex","r","immuneIndex","inLockdown","immuneAt","infected","herdImmunity","Array","length","fill","getChartBuckets","bucketCategories","getChartBucketsCategories","bucketsUsed","useBuckets","infectious","deaths","processDay","startOfDayInfectious","getInfectious","bucket1","bucket2","getInfectiousPercent","getInfectedPercent","getDeathsPercent","getEffectiveR0","finishRun","console","log","getInfected","getDeaths","getNewInfections","getNewDeaths","x","y","labels","label","getLabel","baseLabel","existing","attempt","includes","lockdownEffectiveness","lockdownEnd","lockdownStart","lockdownDays","naiveModelBuckets","App","props","componentDidMount","runSimulation","bucketTextInput","current","trim","split","line","JSON","parse","setState","results","emptyResults","usedBuckets","clearInterval","timer","setInterval","animateDay","days","changeInput","name","render","style","backgroundColor","padding","paddingTop","paddingBottom","fontSize","color","fontWeight","href","renderDescription","Container","fluid","Row","className","renderLeftCol","renderRightCol","borderRadius","maxWidth","bucketString","stringify","Col","sm","marginBottom","Form","Check","id","type","onChange","e","target","defaultChecked","marginTop","Control","ref","as","defaultValue","height","checked","renderSimulateButton","inputs","input","renderInput","Button","variant","onClick","Group","key","Label","column","Number","renderInfectedChart","renderBucketsChart","renderR0Chart","theme","VictoryTheme","material","domain","centerTitle","orientation","gutter","title","symbol","dependentAxis","tickFormat","opacity","stroke","strokeWidth","domainPadding","categories","React","createRef","Component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e80652e3.chunk.js","sourcesContent":["export default class Bucket {\n\n    constructor (sim, data) {\n        const totalSize = sim.bucketsData.reduce((a,b)=>a+b.relativeSize, 0)\n        const percentOfTotalPopulation = data.relativeSize / totalSize;\n        const population = sim.state.population * percentOfTotalPopulation;\n        const initialInfected = sim.state.initialInfected * percentOfTotalPopulation;\n\n        this.sim = sim;\n        this.population = population;\n        this.interactionRate = data.spreadMultiple;\n        this.totalInfected = initialInfected;\n        this.infectedByDay = [initialInfected];\n        this.totalDeaths = 0;\n        this.newInfections = 0;\n        this.newDeaths = 0;\n\n        this.spreadMult = this.sim.R0Adj * percentOfTotalPopulation / this.sim.state.infectiveDays;\n        // console.log(percentOfTotalPopulation, population, initialInfected)\n    }\n\n    getUninfected = () => {\n        return this.population - this.totalInfected;\n    }\n\n    getPeopleIncubating = () => {\n        const to = this.sim.state.incubationDays;\n        return this.infectedByDay.slice(0, to).reduce((a,b)=>a+b, 0);\n    }\n\n    getPeopleInfectious = () => {\n        const from = this.sim.state.incubationDays;\n        const to = this.sim.state.incubationDays + this.sim.state.infectiveDays;\n        // console.log(this.infectedByDay)\n        return this.infectedByDay.slice(from, to).reduce((a,b)=>a+b, 0);\n    }\n\n    startDay = (day) => {\n        // Add new day\n        this.day = day;\n        this.infectedByDay.unshift(0);\n        this.newInfections = 0;\n        \n        // // Some people die\n        // const deathDay = this.sim.state.incubationDays + this.sim.state.averageDaysUntilDeath\n        // this.newDeaths = (this.infectedByDay[deathDay] || 0) * this.sim.state.ifr;\n        // this.totalDeaths += this.newDeaths;\n        \n    }\n\n    processInteractions = (fromBucket) => {\n        // console.log('processInteractions')\n        const totalInteractionRate = fromBucket.interactionRate * this.interactionRate * this.sim.getMitigationMult();\n        const uninfectedRatio = this.getUninfected() / this.population;\n        const newInfections = fromBucket.getPeopleInfectious() * totalInteractionRate * uninfectedRatio * this.spreadMult;\n        // console.log(fromBucket.getPeopleInfectious(), uninfectedRatio, newInfections);\n        // console.log({uninfectedRatio, newInfections})\n        this.newInfections += newInfections\n\n    }\n\n    endDay = () => {\n        this.infectedByDay[0] = this.newInfections;\n        this.totalInfected += this.newInfections;\n    }\n\n}","import Bucket from './Bucket';\nimport * as utils from './utils';\n\nexport default class Sim {\n\n    constructor (state) {\n        this.state = state;\n        this.day = 0\n        this.bucketsData = state.useBuckets ? state.buckets : state.naiveModelBuckets;\n        this.R0Adj = this.calculateR0Adj(this.bucketsData);\n        this.buckets = this.bucketsData.map(data=>new Bucket(this, data))\n        this.dailyData = {\n            infectious: [],\n            infected: [],\n            deaths: [],\n            effectiveR0: [],   \n        }\n    }\n\n    // This function calculates an adjust R0 such that our initial observable R0 is equal to what is set (initialR0)\n    calculateR0Adj = (buckets) => {\n        let values = [];\n        let weights = [];\n        buckets.forEach(b1=>{\n            buckets.forEach(b2=>{\n                values.push(b1.spreadMultiple * b2.spreadMultiple);\n                weights.push(b1.spreadMultiple * b1.relativeSize * b2.relativeSize);\n            });\n        });\n        const mean = utils.weightedMean(values, weights)\n        return this.state.initialR0 / mean;\n    }\n\n    getResults = (done=false) => {\n        if (done || this.state.useAnimate) {\n            const startIndex = this.dailyData.effectiveR0.findIndex(r=>r>1)\n            const immuneIndex = this.dailyData.effectiveR0.findIndex((r,i)=>r < 1 && i > startIndex && !this.inLockdown(i+1));\n            const immuneAt = (immuneIndex > 2) ? (this.dailyData.infected[immuneIndex-1] + this.dailyData.infected[immuneIndex-2]) / 2 : 0\n            const herdImmunity = Array(this.dailyData.effectiveR0.length).fill(immuneAt);\n            const buckets = this.getChartBuckets();\n            const bucketCategories = this.getChartBucketsCategories();\n            return {\n                bucketsUsed: this.state.useBuckets,\n                infectious: this.dailyData.infectious, \n                infected: this.dailyData.infected, \n                deaths: this.dailyData.deaths, \n                effectiveR0: this.dailyData.effectiveR0, \n                buckets, \n                bucketCategories, \n                herdImmunity\n            }     \n        }\n    }\n\n    processDay = (day) => {\n        this.day = day;\n        // Process buckets\n        this.buckets.map(b=>b.startDay(day));\n        this.startOfDayInfectious = this.getInfectious();\n        this.buckets.forEach(bucket1=>{\n            this.buckets.forEach(bucket2=>{\n                bucket2.processInteractions(bucket1)\n            });\n        });\n        this.buckets.map(b=>b.endDay());\n        // Add to daily stats\n        this.dailyData.infectious.push(this.getInfectiousPercent())\n        this.dailyData.infected.push(this.getInfectedPercent())\n        this.dailyData.deaths.push(this.getDeathsPercent())\n        this.dailyData.effectiveR0.push(this.getEffectiveR0())\n\n        return this.getResults();\n    }\n\n    finishRun = () => {\n        this.buckets.forEach(b=>{\n            console.log('--------- bucket ---------')\n            console.log(`Interaction Rate: ${b.interactionRate}`)\n            // console.log(`Infectious ${b.getPeopleInfectious()}`)\n            console.log(`Infected: ${b.totalInfected/b.population}`)\n            // console.log(`Deaths: ${b.totalDeaths}`)\n        })\n        return this.getResults(true);\n    }\n\n    getInfectious = () => this.buckets.map(b=>b.getPeopleInfectious()).reduce((a,b)=>a+b);\n    getInfected = () => this.buckets.map(b=>b.totalInfected).reduce((a,b)=>a+b);\n    getDeaths = () => this.buckets.map(b=>b.totalDeaths).reduce((a,b)=>a+b);\n    getNewInfections = () => this.buckets.map(b=>b.newInfections).reduce((a,b)=>a+b);\n    getNewDeaths = () => this.buckets.map(b=>b.newDeaths).reduce((a,b)=>a+b);\n    \n    getInfectiousPercent = () => this.getInfectious() / this.state.population;\n    getInfectedPercent = () => this.getInfected() / this.state.population\n    getDeathsPercent = () => this.getDeaths() / this.state.population\n\n    getEffectiveR0 = () => {\n        const newInfections = this.getNewInfections()\n        const effectiveR0 = (newInfections / this.startOfDayInfectious * this.state.infectiveDays) || 0;\n        return effectiveR0\n    }\n\n    getChartBuckets = () => {\n        return this.buckets.map((b, i)=>({x: i+1, y: b.totalInfected/b.population}));\n    }\n\n    getChartBucketsCategories = () => {\n        let labels = []\n        this.buckets.forEach(b=>{\n            const label = this.getLabel(`${b.interactionRate}x`, labels);\n            labels.push(label);\n        });\n        return labels\n    }\n\n    getLabel = (baseLabel, existing, attempt=0) => {\n        const label = attempt === 0 ? baseLabel : `${baseLabel}.${attempt}`;\n        if (existing.includes(label)) {\n            return this.getLabel(baseLabel, existing, attempt+1)\n        } else {\n            return label\n        }\n    }\n\n    inLockdown = (day) => {\n        if (this.state.lockdownEffectiveness > 0) {          \n            const lockdownEnd = this.state.lockdownStart + this.state.lockdownDays;\n            return day >= this.state.lockdownStart && day < lockdownEnd;  \n        }\n    }\n\n    getMitigationMult = () => {\n        return (this.inLockdown(this.day)) ? 1 - this.state.lockdownEffectiveness : 1;\n    }\n\n}","export const weightedMean = (arrValues, arrWeights) => {\n    const result = arrValues\n      .map((value, i) => {\n        const weight = arrWeights[i]\n        const sum = value * weight\n        return [sum, weight]\n      })\n      .reduce((p, c) => [p[0] + c[0], p[1] + c[1]], [0, 0])\n  \n    return result[0] / result[1]\n  }","import React from 'react';\nimport './App.css';\nimport { VictoryLegend, VictoryArea, VictoryBar, VictoryLine, VictoryChart, VictoryAxis, VictoryTheme } from 'victory';\nimport Sim from './simulation/Sim';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.emptyResults = {\n      buckets: [],\n      bucketCategories: [],\n      infectious: [],\n      infected: [],\n      deaths: [],\n      effectiveR0: [],\n      herdImmunity: [],\n    }\n    this.state = {\n        useBuckets: true,\n        usedBuckets: true,\n        useAnimate: true,\n        naiveModelBuckets: [\n          {relativeSize: 1, spreadMultiple: 1}\n        ],\n        buckets: [\n          {relativeSize: 1, spreadMultiple: 20},\n          {relativeSize: 5, spreadMultiple: 5},\n          {relativeSize: 20, spreadMultiple: 2},\n          {relativeSize: 48, spreadMultiple: 1},\n          {relativeSize: 20, spreadMultiple: 0.5},\n          {relativeSize: 5, spreadMultiple: 0.25},\n          {relativeSize: 1, spreadMultiple: 0.1},\n        ],\n        results: this.emptyResults,\n    };\n    this.day = 0;\n    this.sim = null;\n    this.inputs = [\n      ['Population', 'population', 1000000],\n      ['Initial infected', 'initialInfected', 1000],\n      ['Initial R0', 'initialR0', 2.5],\n      // ['IFR', 'ifr', 0.5],\n      ['Days before infectious', 'incubationDays', 3],\n      ['Days Infectious', 'infectiveDays', 7],\n      // ['Days until death', 'averageDaysUntilDeath', 21],\n      ['Days in chart', 'days', 150],\n      ['Mitigation start day', 'lockdownStart', 60],\n      ['Mitigation days', 'lockdownDays', 14],\n      ['Mitigation effectiveness', 'lockdownEffectiveness', 0],\n    ]\n    this.inputs.forEach(input=>{\n      this.state[input[1]] = input[2]\n    })\n    this.bucketTextInput = React.createRef(); \n  }\n\n  componentDidMount = () => {\n    this.runSimulation();\n  }\n\n  runSimulation = async () => {\n\n    console.log('runSimulation')\n\n    if (this.state.useBuckets) {\n      const buckets = this.bucketTextInput.current.value.trim().split(\"\\n\").map(line=>JSON.parse(line));\n      await this.setState({buckets});\n    }\n\n    this.setState({\n      results: this.emptyResults,\n      usedBuckets: this.state.useBuckets,\n    });\n\n    this.day = 0;\n    this.sim = new Sim(this.state);\n\n    clearInterval(this.timer);\n    if (this.state.useAnimate) {\n      this.timer = setInterval(()=>{\n        this.animateDay()\n      }, 100);\n    } else {\n      for (let day = 1; day <= this.state.days; day++) {\n        this.sim.processDay(day);\n      }\n      const results = this.sim.finishRun();\n      this.setState({results})\n    }\n  }\n\n  animateDay = () => {\n    this.day++;\n    if (this.day < this.state.days) {\n      const results = this.sim.processDay(this.day)\n      this.setState({results})\n    } else {\n      clearInterval(this.timer);\n      this.sim.finishRun();\n    }\n  }\n\n  changeInput = (name, value) => {\n    this.setState({[name]: value})\n  }\n\n  render = () => {\n    return (\n      <>\n      <div style={{backgroundColor: '#371A32', padding: 20, paddingTop: 30, paddingBottom: 30, fontSize: 15, color: 'white'}}>\n        <h2 style={{fontWeight: 'bold', color: 'white'}}>\n          Coronavirus Super Spreader Model\n        </h2>\n        <span>Created by <a style={{color: '#F2C7EB'}} href='https://twitter.com/jspaulding'>Jesse Spaulding</a>. Source code available on <a style={{color: '#F2C7EB'}} href=\"https://github.com/jspauld/coronavirus-super-spreader-model\">GitHub</a></span>\n      </div>\n      {this.renderDescription()}\n      <Container fluid>\n        <Row className='h-100'>\n          {this.renderLeftCol()}\n          {this.renderRightCol()}\n        </Row>\n      </Container>\n      </>\n    );\n  }\n\n  renderDescription = () => {\n    return (\n      <div style={{backgroundColor: '#F2C7EB', padding: 20, fontSize: 15, borderRadius: 0}}>\n        <p style={{maxWidth: 1000}}>\n        <b>About this model:</b> This model helps visualize how heterogeneity in the population affects the level at which we can expect to achieve herd immunity.\n        I created this because some epidemiologists have been <a href=\"https://www.nytimes.com/2020/05/01/opinion/sunday/coronavirus-herd-immunity.html\">making arguments against herd immunity</a> using naive models that fail to account for heterogeneity entirely.\n        </p>\n        <p style={{maxWidth: 1000}}>\n          <b>Why heterogenity matters:</b> Not everyone is alike in their likelihood of catching and spreading the virus. \n          Someone who lives in a dense urban area and goes to crowded bars every night is <i>MUCH</i> more likely to contract and spread the virus than a person who sits at home playing video games all day. \n          \"Super spreaders\" catch the virus first, and as they become immune the R0 is lowered among the remaining population.\n        </p>\n        <p style={{maxWidth: 1000}}>\n          <b>Disclaimer:</b> I'm not an epidemiologist. There may be errors in my code. The source code is available on <a href=\"https://github.com/jspauld/coronavirus-super-spreader-model\">GitHub</a>.\n        </p>\n      </div>\n    )\n  }\n\n  renderLeftCol = () => {\n    const bucketString = this.state.buckets.reduce((a,b)=>`${a}${JSON.stringify(b)}\\n`, '')\n    return (\n      <Col sm={5} style={{backgroundColor: '#F1EBF0', paddingTop: 30, paddingBottom: 30}}>\n        \n\n        <h4 style={{marginBottom: 20}}>Choose model</h4>\n        <Form.Check\n          id='useBucketsYes'\n          name='useBuckets'\n          type='radio'\n          label=\"Heterogeneous (accounts for super spreaders)\"\n          onChange={(e)=>this.changeInput(e.target.name, true)}\n          defaultChecked={this.state.useBuckets}\n        />\n        <Form.Check\n          id='useBucketsNo'\n          name='useBuckets'\n          type='radio'\n          label=\"Naive\"\n          onChange={(e)=>this.changeInput(e.target.name, false)}\n          defaultChecked={!this.state.useBuckets}\n        />\n        {this.state.useBuckets && \n         <>\n         <h4 style={{marginTop: 20}}>Population buckets</h4>\n          <div style={{fontSize: 14, marginTop: 10, marginBottom: 5}}>\n            Each line below represents a population bucket, each with a 'spreadMultiple' that defines how likely those people are to catch & spread the virus.\n            Add, remove, or edit buckets to see the effect.\n          </div>\n          <Form.Control ref={this.bucketTextInput} as='textarea' defaultValue={bucketString} style={{height: 200, fontSize: 14}} />\n         </>\n        }\n\n      <Form.Check\n        id='useAnimate'\n        name='useAnimate'\n        type='checkbox'\n        label=\"Animate charts\"\n        style={{marginTop: 30}}\n        onChange={(e)=>this.changeInput(e.target.name, e.target.checked)}\n        defaultChecked={this.state.useAnimate}\n      />\n\n       {this.renderSimulateButton()}\n\n        <h4 style={{marginTop: 30}}>Parameters</h4>\n        {this.inputs.map(input=>this.renderInput(input))}\n        {this.renderSimulateButton()}\n      </Col>\n    )\n  }\n\n  renderSimulateButton = () => (\n    <>\n      <Button variant=\"primary\" className='btn-lg' onClick={this.runSimulation} style={{marginTop: 20}}>Run Simulation</Button>\n    </>\n  )\n\n  renderInput = (input) => {\n    return (\n      <Form.Group key={input[1]} as={Row} className='inputContainer'>\n        <Form.Label column sm=\"6\" style={{fontSize: 14}}>{input[0]}</Form.Label>\n        <Col sm=\"6\">\n          <Form.Control type=\"text\" id={input[1]} defaultValue={input[2]} onChange={(e)=>this.changeInput(e.target.id, Number(e.target.value))} />\n        </Col>\n      </Form.Group>\n    )\n  }\n\n  renderRightCol = () => {\n    return (\n      <Col sm={7} style={{paddingTop: 30}}>\n        <div>\n          <h4>Population infected over time</h4>\n          {this.renderInfectedChart()}\n          {this.state.usedBuckets && <>\n            <h4>Population infected by bucket</h4>\n            <p>The population is divided into buckets according to likelihood of catching and spreading the virus.</p>\n            {this.renderBucketsChart()}\n          </>}\n          <h4>R0 over time</h4>\n          {this.renderR0Chart()}\n        </div>\n      </Col>\n    )\n  }\n\n  renderInfectedChart = () => {\n    return (\n      <VictoryChart \n        theme={VictoryTheme.material}\n        domain={{ x: [0, this.state.days], y: [0, 1] }}\n        style={{ labels: { fontSize: 8 } }}\n        height={270}\n      >\n        <VictoryLegend x={10} y={10}\n          // title=\"Legend\"\n          centerTitle\n          orientation=\"horizontal\"\n          gutter={20}\n          style={{ title: {fontSize: 14 }, labels: {fontSize: 10} }}\n          data={[\n            { name: \"Infectious\", symbol: { fill: \"orange\" } },\n            { name: \"Infected Population\", symbol: { fill: \"purple\" } },\n            { name: \"Herd Immunity\", symbol: { fill: \"pink\" } },\n            // { name: \"Total Dead\", symbol: { fill: \"red\" } }\n          ]}\n        />\n        <VictoryAxis\n          // tickValues specifies both the number of ticks and where\n          // they are placed on the axis\n          // tickValues={[1, 2, 3, 4]}\n          // tickFormat={[\"Quarter 1\", \"Quarter 2\", \"Quarter 3\", \"Quarter 4\"]}\n        />\n        <VictoryAxis\n          dependentAxis\n          // tickFormat specifies how ticks should be displayed\n          tickFormat={(x) => (`${x*100}%`)}\n        />\n          <VictoryArea data={this.state.results.infectious} style={{data: { fill: \"orange\", opacity: 1 }}} />\n          <VictoryLine data={this.state.results.infected} style={{data: { stroke: 'purple', opacity: 1 }}} />\n          <VictoryLine data={this.state.results.herdImmunity} style={{data: { stroke: 'pink', strokeWidth: 2, opacity: 1 }}} />\n          {/* <VictoryLine data={this.state.deaths} style={{data: { fill: \"red\", opacity: 0.7 }}} /> */}\n      </VictoryChart>\n    )\n  }\n\n  renderBucketsChart = () => {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        domain={{ y: [0, 1] }}\n        domainPadding={20}\n        height={220}\n      >\n        <VictoryAxis />\n        <VictoryAxis dependentAxis tickFormat={(x) => (`${x*100}%`)} />\n        <VictoryBar\n          data={this.state.results.buckets} \n          categories={{ x: this.state.results.bucketCategories }}\n          // barRatio={0.8} \n          style={{data: { fill: \"purple\" }}} />\n      </VictoryChart>\n    )\n  }\n\n  renderR0Chart = () => {\n    return (\n      <VictoryChart \n        theme={VictoryTheme.material}\n        domain={{ x: [0, this.state.days], y: [0, 4] }}\n        height={220}\n      >\n        <VictoryLegend x={10} y={10}\n          // title=\"Legend\"\n          centerTitle\n          orientation=\"horizontal\"\n          gutter={20}\n          style={{ title: {fontSize: 14 }, labels: {fontSize: 10} }}\n          data={[\n            { name: \"R0 Over Time\", symbol: { fill: \"purple\" } },\n            // { name: \"Total Dead\", symbol: { fill: \"red\" } }\n          ]}\n        />\n      <VictoryAxis\n      />\n      <VictoryAxis\n        dependentAxis\n      />\n        <VictoryLine data={this.state.results.effectiveR0} style={{data: { stroke: \"purple\", opacity: 1 }}} />\n      </VictoryChart>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}