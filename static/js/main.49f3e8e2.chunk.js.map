{"version":3,"sources":["simulation/Bucket.js","simulation/Sim.js","simulation/utils.js","App.js","index.js"],"names":["Bucket","sim","data","getUninfected","population","totalInfected","getPeopleIncubating","to","state","incubationDays","infectedByDay","slice","reduce","a","b","getPeopleInfectious","from","infectiveDays","startDay","day","unshift","newInfections","deathDay","averageDaysUntilDeath","newDeaths","ifr","totalDeaths","processInteractions","fromBucket","totalInteractionRate","interactionRate","getMitigationMult","uninfectedRatio","spreadMult","lockdownEnd","lockdownStart","lockdownDays","lockdownEffectiveness","console","log","totalSize","bucketsData","relativeSize","percentOfTotalPopulation","initialInfected","this","spreadMultiple","effectiveR0","R0Adj","Sim","calculateR0Adj","buckets","values","weights","forEach","b1","b2","push","mean","arrValues","arrWeights","result","map","value","i","weight","p","c","utils","initialR0","bucket1","bucket2","getInfectious","getInfected","getDeaths","getNewInfections","getNewDeaths","getInfectiousPercent","getInfectedPercent","getDeathsPercent","getEffectiveR0","getChartBuckets","x","y","getChartBucketsCategories","labels","label","getLabel","baseLabel","existing","attempt","includes","onComplete","useBuckets","naiveModelBuckets","App","props","componentDidMount","runSimulation","bucketTextInput","current","trim","split","line","JSON","parse","setState","infectious","infected","deaths","days","startIndex","findIndex","r","immuneIndex","immuneAt","herdImmunity","Array","length","fill","bucketCategories","results","bucketsUsed","changeInput","name","render","style","backgroundColor","padding","paddingTop","paddingBottom","fontSize","color","fontWeight","href","maxWidth","Container","fluid","Row","className","renderLeftCol","renderRightCol","bucketString","stringify","Col","sm","Form","Check","type","onChange","e","target","defaultChecked","Label","column","Control","ref","as","defaultValue","height","renderSimulateButton","marginTop","inputs","input","renderInput","Button","variant","onClick","Group","key","id","Number","renderInfectedChart","renderBucketsChart","renderR0Chart","theme","VictoryTheme","material","domain","centerTitle","orientation","gutter","title","symbol","dependentAxis","tickFormat","opacity","stroke","domainPadding","categories","simUsedBuckets","React","createRef","Component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49f3e8e2.chunk.js","sourcesContent":["export default class Bucket {\n\n    constructor (sim, data) {\n        console.log({data})\n        const totalSize = sim.bucketsData.reduce((a,b)=>a+b.relativeSize, 0)\n        const percentOfTotalPopulation = data.relativeSize / totalSize;\n        const population = sim.state.population * percentOfTotalPopulation;\n        const initialInfected = sim.state.initialInfected * percentOfTotalPopulation;\n\n        this.sim = sim;\n        this.population = population;\n        this.interactionRate = data.spreadMultiple;\n        this.totalInfected = initialInfected;\n        this.infectedByDay = [initialInfected];\n        this.totalDeaths = 0;\n        this.newInfections = 0;\n        this.newDeaths = 0;\n        this.effectiveR0 = 0;\n\n        this.spreadMult = this.sim.R0Adj * percentOfTotalPopulation / this.sim.state.infectiveDays;\n        console.log(percentOfTotalPopulation, population, initialInfected)\n    }\n\n    getUninfected = () => {\n        return this.population - this.totalInfected;\n    }\n\n    getPeopleIncubating = () => {\n        const to = this.sim.state.incubationDays;\n        return this.infectedByDay.slice(0, to).reduce((a,b)=>a+b, 0);\n    }\n\n    getPeopleInfectious = () => {\n        const from = this.sim.state.incubationDays;\n        const to = this.sim.state.incubationDays + this.sim.state.infectiveDays;\n        return this.infectedByDay.slice(from, to).reduce((a,b)=>a+b, 0);\n    }\n\n    startDay = (day) => {\n        // Add new day\n        this.day = day;\n        this.infectedByDay.unshift(0);\n        this.newInfections = 0;\n        \n        // Some people die\n        const deathDay = this.sim.state.incubationDays + this.sim.state.averageDaysUntilDeath\n        this.newDeaths = (this.infectedByDay[deathDay] || 0) * this.sim.state.ifr;\n        this.totalDeaths += this.newDeaths;\n        \n    }\n\n    processInteractions = (fromBucket) => {\n        const totalInteractionRate = fromBucket.interactionRate * this.interactionRate * this.getMitigationMult();\n        const uninfectedRatio = this.getUninfected() / this.population;\n        const newInfections = fromBucket.getPeopleInfectious() * totalInteractionRate * uninfectedRatio * this.spreadMult;\n        this.newInfections += newInfections\n        this.infectedByDay[0] += newInfections;\n        this.totalInfected += newInfections;\n    }\n\n    getMitigationMult = () => {\n        const lockdownEnd = this.sim.state.lockdownStart + this.sim.state.lockdownDays;\n        const inLockdown = this.day >= this.sim.state.lockdownStart && this.day < lockdownEnd;\n        if (inLockdown) {\n            return 1 - this.sim.state.lockdownEffectiveness;\n        } else {\n            return 1;\n        }\n    }\n\n}","import Bucket from './Bucket';\nimport * as utils from './utils';\n\nexport default class Sim {\n\n    constructor (state) {\n        this.state = state;\n        this.bucketsData = state.useBuckets ? state.buckets : state.naiveModelBuckets;\n        this.R0Adj = this.calculateR0Adj(this.bucketsData);\n        this.buckets = this.bucketsData.map(data=>new Bucket(this, data))\n    }\n\n    // This function calculates an adjust R0 such that our initial observable R0 is equal to what is set (initialR0)\n    calculateR0Adj = (buckets) => {\n        let values = [];\n        let weights = [];\n        buckets.forEach(b1=>{\n            buckets.forEach(b2=>{\n                values.push(b1.spreadMultiple * b2.spreadMultiple);\n                weights.push(b1.spreadMultiple * b1.relativeSize * b2.relativeSize);\n            });\n        });\n        const mean = utils.weightedMean(values, weights)\n        return this.state.initialR0 / mean;\n    }\n\n    startDay = (day) => {\n        this.buckets.map(b=>b.startDay(day));\n        this.buckets.forEach(bucket1=>{\n            this.buckets.forEach(bucket2=>{\n                bucket2.processInteractions(bucket1)\n            });\n        });\n    }\n\n    getInfectious = () => this.buckets.map(b=>b.getPeopleInfectious()).reduce((a,b)=>a+b);\n    getInfected = () => this.buckets.map(b=>b.totalInfected).reduce((a,b)=>a+b);\n    getDeaths = () => this.buckets.map(b=>b.totalDeaths).reduce((a,b)=>a+b);\n    getNewInfections = () => this.buckets.map(b=>b.newInfections).reduce((a,b)=>a+b);\n    getNewDeaths = () => this.buckets.map(b=>b.newDeaths).reduce((a,b)=>a+b);\n    \n    getInfectiousPercent = () => this.getInfectious() / this.state.population;\n    getInfectedPercent = () => this.getInfected() / this.state.population\n    getDeathsPercent = () => this.getDeaths() / this.state.population\n\n    getEffectiveR0 = () => {\n        return (this.getNewInfections() / this.getInfectious() * this.state.infectiveDays) || 0;\n    }\n\n    getChartBuckets = () => {\n        return this.buckets.map((b, i)=>({x: i+1, y: b.totalInfected/b.population}));\n    }\n\n    getChartBucketsCategories = () => {\n        let labels = []\n        this.buckets.forEach(b=>{\n            const label = this.getLabel(`${b.interactionRate}x`, labels);\n            labels.push(label);\n        });\n        return labels\n    }\n\n    getLabel = (baseLabel, existing, attempt=0) => {\n        const label = attempt === 0 ? baseLabel : `${baseLabel}.${attempt}`;\n        console.log(label, existing)\n        if (existing.includes(label)) {\n            return this.getLabel(baseLabel, existing, attempt+1)\n        } else {\n            return label\n        }\n    }\n\n    onComplete = () => {\n        this.buckets.forEach(b=>{\n            console.log('--------- bucket ---------')\n            console.log(`Interaction Rate: ${b.interactionRate}`)\n            // console.log(`Infectious ${b.getPeopleInfectious()}`)\n            console.log(`Infected: ${b.totalInfected/b.population}`)\n            // console.log(`Deaths: ${b.totalDeaths}`)\n        })\n    }\n\n}","export const weightedMean = (arrValues, arrWeights) => {\n    const result = arrValues\n      .map((value, i) => {\n        const weight = arrWeights[i]\n        const sum = value * weight\n        return [sum, weight]\n      })\n      .reduce((p, c) => [p[0] + c[0], p[1] + c[1]], [0, 0])\n  \n    return result[0] / result[1]\n  }","import React from 'react';\nimport './App.css';\nimport { VictoryLegend, VictoryArea, VictoryBar, VictoryLine, VictoryChart, VictoryAxis, VictoryTheme } from 'victory';\nimport Sim from './simulation/Sim';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        useBuckets: false,\n        naiveModelBuckets: [\n          {relativeSize: 1, spreadMultiple: 1}\n        ],\n        buckets: [\n          {relativeSize: 1, spreadMultiple: 0.1},\n          {relativeSize: 5, spreadMultiple: 0.25},\n          {relativeSize: 20, spreadMultiple: 0.5},\n          {relativeSize: 48, spreadMultiple: 1},\n          {relativeSize: 20, spreadMultiple: 2},\n          {relativeSize: 5, spreadMultiple: 5},\n          {relativeSize: 1, spreadMultiple: 20},\n        ],\n        results: {\n          simUsedBuckets: false,\n          buckets: [],\n          bucketCategories: [],\n          infectious: [],\n          infected: [],\n          deaths: [],\n          effectiveR0: [],\n          herdImmunity: [],\n        },\n    };\n    this.sim = null;\n    this.inputs = [\n      ['Population', 'population', 330000000],\n      ['Initial infected', 'initialInfected', 10000],\n      ['Initial R0', 'initialR0', 2.5],\n      ['IFR', 'ifr', 0.5],\n      ['Days before infectious', 'incubationDays', 3],\n      ['Days Infectious', 'infectiveDays', 5],\n      ['Days until death', 'averageDaysUntilDeath', 21],\n      ['Days in chart', 'days', 150],\n      ['Mitigation start day', 'lockdownStart', 60],\n      ['Mitigation days', 'lockdownDays', 14],\n      ['Mitigation effectiveness', 'lockdownEffectiveness', 0],\n    ]\n    this.inputs.forEach(input=>{\n      this.state[input[1]] = input[2]\n    })\n    this.bucketTextInput = React.createRef(); \n  }\n\n  componentDidMount = () => {\n    this.runSimulation();\n  }\n\n  runSimulation = async () => {\n\n    if (this.state.useBuckets) {\n      const buckets = this.bucketTextInput.current.value.trim().split(\"\\n\").map(line=>JSON.parse(line));\n      await this.setState({buckets});\n    }\n\n    // Reset chart\n    let infectious = [];\n    let infected = [];\n    let deaths = [];\n    let effectiveR0 = [];\n    this.sim = new Sim(this.state);\n    for (let day = 1; day <= this.state.days; day++) {\n      this.sim.startDay(day);\n      infectious = [...infectious, this.sim.getInfectiousPercent()];\n      infected = [...infected, this.sim.getInfectedPercent()];\n      deaths = [...deaths, this.sim.getDeathsPercent()];\n      effectiveR0 = [...effectiveR0, this.sim.getEffectiveR0()];\n    }\n    const startIndex = effectiveR0.findIndex(r=>r>1)\n    const immuneIndex = effectiveR0.findIndex((r,i)=>r<1&&i>startIndex);\n    const immuneAt = (immuneIndex > 0) ? infected[immuneIndex] : 0\n    const herdImmunity = Array(effectiveR0.length).fill(immuneAt);\n    const buckets = this.sim.getChartBuckets();\n    const bucketCategories = this.sim.getChartBucketsCategories();\n    console.log({infectious})\n    this.setState({results: {\n      bucketsUsed: this.state.useBuckets,\n      infectious, infected, deaths, effectiveR0, buckets, bucketCategories, herdImmunity}});\n    this.sim.onComplete();\n  }\n\n  changeInput = (name, value) => {\n    this.setState({[name]: value})\n  }\n\n  render = () => {\n    return (\n      <>\n      <div style={{backgroundColor: '#371A32', padding: 20, paddingTop: 30, paddingBottom: 30, fontSize: 15, color: 'white'}}>\n        <h2 style={{fontWeight: 'bold', color: 'white'}}>\n          Coronavirus Super Spreader Simulation\n        </h2>\n        <span>Created by <a style={{color: '#F2C7EB'}} href='https://twitter.com/jspaulding'>Jesse Spaulding</a>. Source code available on <a style={{color: '#F2C7EB'}} href=\"https://github.com/jspauld/coronavirus-super-spreader-model\">GitHub</a></span>\n      </div>\n      <div style={{backgroundColor: '#F2C7EB', padding: 20, fontSize: 15}}>\n        <p style={{maxWidth: 800}}>\n        <b>About this model:</b> This model helps visualize how heterogeneity in the population affects the level at which we can expect to achieve herd immunity.\n        I created this because some epidemiologists have been <a href=\"https://www.nytimes.com/2020/05/01/opinion/sunday/coronavirus-herd-immunity.html\">making arguments</a> against herd immunity using naive models that fail to account for heterogeneity entirely.\n        </p>\n        <p style={{maxWidth: 800}}>\n          <b>Why heterogenity matters:</b> Not everyone is alike in their likelihood of catching and spreading the virus. \n          Someone who lives in a dense urban area and goes to crowded bars every night is <i>MUCH</i> more likely to contract and spread the virus than a person who sits at home playing video games all day. \n          \"Super spreaders\" catch the virus first, and as they become immune the R0 is lowered among the remaining population.\n        </p>\n        <p style={{maxWidth: 800}}>\n          <b>Disclaimer:</b> I'm not an epidemiologist. My math/code could be wrong. Code available on <a href=\"https://github.com/jspauld/coronavirus-super-spreader-model\">GitHub</a>.\n        </p>\n      </div>\n      <Container fluid>\n        <Row className='h-100'>\n          {this.renderLeftCol()}\n          {this.renderRightCol()}\n        </Row>\n      </Container>\n      </>\n    );\n  }\n\n  renderLeftCol = () => {\n    const bucketString = this.state.buckets.reduce((a,b)=>`${a}${JSON.stringify(b)}\\n`, '')\n    return (\n      <Col sm={5} style={{backgroundColor: '#F1EBF0', paddingTop: 30, paddingBottom: 30}}>\n        <h4>Choose model</h4>\n        <Form.Check\n          name='useBuckets'\n          type='radio'\n          label=\"Naive\"\n          onChange={(e)=>this.changeInput(e.target.name, false)}\n          defaultChecked={!this.state.useBuckets}\n        />\n        <Form.Check\n          name='useBuckets'\n          type='radio'\n          label=\"Heterogeneous (accounts for super spreaders)\"\n          onChange={(e)=>this.changeInput(e.target.name, true)}\n          defaultChecked={this.state.useBuckets}\n        />\n        {this.state.useBuckets && \n         <>\n          <Form.Label column sm=\"6\" style={{fontSize: 14}}>Buckets</Form.Label>\n          <Form.Control ref={this.bucketTextInput} as='textarea' defaultValue={bucketString} style={{height: 200, fontSize: 14}} />\n         </>\n        }\n       {this.renderSimulateButton()}\n        <h4 style={{marginTop: 30}}>Parameters</h4>\n        {this.inputs.map(input=>this.renderInput(input))}\n        {this.renderSimulateButton()}\n      </Col>\n    )\n  }\n\n  renderSimulateButton = () => (\n    <Button variant=\"primary\" className='btn-block' onClick={this.runSimulation} style={{marginTop: 20}}>Run Simulation</Button>\n  )\n\n  renderInput = (input) => {\n    return (\n      <Form.Group key={input[1]} as={Row} className='inputContainer'>\n        <Form.Label column sm=\"6\" style={{fontSize: 14}}>{input[0]}</Form.Label>\n        <Col sm=\"6\">\n          <Form.Control type=\"text\" id={input[1]} defaultValue={input[2]} onChange={(e)=>this.changeInput(e.target.id, Number(e.target.value))} />\n        </Col>\n      </Form.Group>\n    )\n  }\n\n  renderRightCol = () => {\n    return (\n      <Col sm={7} style={{paddingTop: 30}}>\n        <div>\n          <h4>Population infected over time</h4>\n          {this.renderInfectedChart()}\n          {this.state.results.bucketsUsed && <>\n            <h4>Population infected by bucket</h4>\n            <p>The population is divided into buckets according to likelihood of catching and spreading the virus.</p>\n            {this.renderBucketsChart()}\n          </>}\n          <h4>R0 over time</h4>\n          {this.renderR0Chart()}\n        </div>\n      </Col>\n    )\n  }\n\n  renderInfectedChart = () => {\n    return (\n      <VictoryChart \n        theme={VictoryTheme.material}\n        domain={{ x: [0, this.state.days], y: [0, 1] }}\n        style={{ labels: { fontSize: 8 } }}\n        height={'270'}\n      >\n        <VictoryLegend x={10} y={10}\n          // title=\"Legend\"\n          centerTitle\n          orientation=\"horizontal\"\n          gutter={20}\n          style={{ title: {fontSize: 14 }, labels: {fontSize: 10} }}\n          data={[\n            { name: \"Infectious\", symbol: { fill: \"orange\" } },\n            { name: \"Infected Population\", symbol: { fill: \"purple\" } },\n            { name: \"Herd Immunity\", symbol: { fill: \"pink\" } },\n            // { name: \"Total Dead\", symbol: { fill: \"red\" } }\n          ]}\n        />\n        <VictoryAxis\n          // tickValues specifies both the number of ticks and where\n          // they are placed on the axis\n          // tickValues={[1, 2, 3, 4]}\n          // tickFormat={[\"Quarter 1\", \"Quarter 2\", \"Quarter 3\", \"Quarter 4\"]}\n        />\n        <VictoryAxis\n          dependentAxis\n          // tickFormat specifies how ticks should be displayed\n          tickFormat={(x) => (`${x*100}%`)}\n        />\n          <VictoryArea data={this.state.results.infectious} style={{data: { fill: \"orange\", opacity: 1 }}} />\n          <VictoryLine data={this.state.results.infected} style={{data: { stroke: 'purple', opacity: 1 }}} />\n          <VictoryLine data={this.state.results.herdImmunity} style={{data: { stroke: 'pink', opacity: 1 }}} />\n          {/* <VictoryLine data={this.state.deaths} style={{data: { fill: \"red\", opacity: 0.7 }}} /> */}\n      </VictoryChart>\n    )\n  }\n\n  renderBucketsChart = () => {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        domain={{ y: [0, 1] }}\n        domainPadding={20}\n        height={'220'}\n      >\n        <VictoryAxis />\n        <VictoryAxis dependentAxis tickFormat={(x) => (`${x*100}%`)} />\n        <VictoryBar\n          data={this.state.results.buckets} \n          categories={{ x: this.state.results.bucketCategories }}\n          // barRatio={0.8} \n          style={{data: { fill: \"purple\" }}} />\n      </VictoryChart>\n    )\n  }\n\n  renderR0Chart = () => {\n    return (\n      <VictoryChart \n        theme={VictoryTheme.material}\n        domain={{ x: [0, this.state.days], y: [0, 4] }}\n        height={220}\n      >\n        <VictoryLegend x={10} y={10}\n          // title=\"Legend\"\n          centerTitle\n          orientation=\"horizontal\"\n          gutter={20}\n          style={{ title: {fontSize: 14 }, labels: {fontSize: 10} }}\n          data={[\n            { name: \"R0 Over Time\", symbol: { fill: \"purple\" } },\n            // { name: \"Total Dead\", symbol: { fill: \"red\" } }\n          ]}\n        />\n      <VictoryAxis\n      />\n      <VictoryAxis\n        dependentAxis\n      />\n        <VictoryLine data={this.state.results.effectiveR0} style={{data: { stroke: \"purple\", opacity: 1 }}} />\n      </VictoryChart>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}